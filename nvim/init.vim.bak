call plug#begin()
" Make sure you use single quotes

Plug 'neovim/nvim-lspconfig'
Plug 'onsails/lspkind.nvim'
Plug 'hrsh7th/cmp-nvim-lsp', { 'branch': 'main' }
Plug 'hrsh7th/cmp-buffer', { 'branch': 'main' }
Plug 'hrsh7th/cmp-path', { 'branch': 'main' }
Plug 'hrsh7th/cmp-cmdline', { 'branch': 'main' }
Plug 'hrsh7th/cmp-calc', { 'branch': 'main' }
Plug 'hrsh7th/nvim-cmp', { 'branch': 'main' }
Plug 'folke/trouble.nvim'

Plug 'mfussenegger/nvim-dap'
Plug 'rcarriga/nvim-dap-ui'

Plug 'jose-elias-alvarez/null-ls.nvim', { 'branch': 'main' }

Plug 'RRethy/vim-illuminate'

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'natecraddock/telescope-zf-native.nvim'
Plug 'nvim-telescope/telescope-media-files.nvim'

Plug 'stevearc/dressing.nvim'

Plug 'catppuccin/nvim', { 'as': 'catppuccin' }

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" For easier (de)surrounding of text objects with operators
Plug 'tpope/vim-surround'

" Toggle comments with an operator, 'gc'
Plug 'tpope/vim-commentary'

" Repeat un-repeatable things with '.'
Plug 'tpope/vim-repeat'

" An improved netrw fork 
" Plug 'tpope/vim-vinegar'
Plug 'stevearc/oil.nvim'

Plug 'tpope/vim-abolish'

Plug 'L3MON4D3/LuaSnip'

Plug 'lukas-reineke/indent-blankline.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" Icons
Plug 'nvim-tree/nvim-web-devicons'

" Initialize plugin system
call plug#end()

" Report that we have true color terminal
set termguicolors
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
" set guifont=Cascadia\ Code:h13
colorscheme catppuccin-latte

" So that we exit terminal-mode with escape
tnoremap <Esc> <C-\><C-n>

" This makes vim more reliably with tools that detect changes on save
set backupcopy=yes

" Set the terminal title when opening file in buffer
set title

lua <<EOF

require("oil").setup()
vim.keymap.set("n", "-", "<CMD>Oil<CR>", { desc = "Open parent directory" })

vim.filetype.add({
extension = {
    pipeline = 'pipeline',
}})

  require'ibl'.setup {
      indent = {
          char = "┃" -- center aligned, rather than left align
      }
  }

  require'nvim-treesitter.configs'.setup {
    ensure_installed = "all", -- one of "all"  (parsers with maintainers), or a list of languages
    highlight = {
      enable = true,              -- false will disable the whole extension
    },
    indent = {
      enable = true
    },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = "gnn",
        node_incremental = "grn",
        scope_incremental = "grc",
        node_decremental = "grm",
      },
    },
    textobjects = { enable = true }
  }
EOF

set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set nofoldenable " disable fold at startup


" Set leader and localleader to comma
let mapleader = ","
let maplocalleader = ","

nnoremap <leader>cd :cd %:p:h<CR>

" Remove highlight with leader+enter
nnoremap <leader><CR> :noh<CR>

" Make scrolling happen when 5 characters from top/bottom/left/right
set scrolloff=5
set sidescrolloff=5

" Use hidden buffers
set hidden

" Ignore casing in search/replace/etc.
set ignorecase
" Overrides ignore case if it contains upper case character
set smartcase

" Allow hidden buffers
set hidden

" Show realtime effect of substitute commands
set inccommand=nosplit

" Try to guess what indent level next row should have
set smartindent

" Set tab to spaces
set tabstop=4
set shiftwidth=4
set expandtab

" Set line numbers
set number
" But turn it off in terminal windows!
augroup TerminalStuff
  autocmd TermOpen * setlocal nonumber norelativenumber
augroup END

" Set a colored column at column 80
set colorcolumn=80

set wrap
set linebreak

" Ignore setting
set wildignore=.git,node_modules,.meteor,*.min.*,OneDrive

" Wild menu uses popup menu, which is a bit blended
" set wildoptions=pum
" set pumblend=15

" Split on the other side
set splitbelow
set splitright

set mouse=a

" Key bind make -s
nmap <leader>mk :make -s<cr>

" Use xdg-open on linux
if (has("linux"))
  let g:netrw_browsex_viewer="xdg-open"
endif

set list
set listchars=trail:-,nbsp:+,space: ,tab:║ ,

""""""""""" nvim dap config

lua <<EOF

local dap = require('dap')
local dapui = require("dapui")

dapui.setup()

dap.adapters.lldb = {
  type = 'executable',
  command = '/usr/bin/lldb-vscode', -- adjust as needed, must be absolute path
  name = 'lldb'
}

dap.configurations.cpp = {
  {
    name = 'Launch',
    type = 'lldb',
    request = 'launch',
    program = function()
      return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
    end,
    cwd = '${workspaceFolder}',
    stopOnEntry = false,
    args = {},

    -- 💀
    -- if you change `runInTerminal` to true, you might need to change the yama/ptrace_scope setting:
    --
    --    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
    --
    -- Otherwise you might get the following error:
    --
    --    Error on launch: Failed to attach to the target process
    --
    -- But you should be aware of the implications:
    -- https://www.kernel.org/doc/html/latest/admin-guide/LSM/Yama.html
    -- runInTerminal = false,
  },
}

vim.fn.sign_define('DapBreakpoint', {text='🔴', texthl='', linehl='', numhl=''})


dap.listeners.after.event_initialized["dapui_config"] = function()
  dapui.open()
end
dap.listeners.before.event_terminated["dapui_config"] = function()
  dapui.close()
end
dap.listeners.before.event_exited["dapui_config"] = function()
  dapui.close()
end

vim.keymap.set('n', '<leader>b', dap.toggle_breakpoint)
vim.keymap.set('n', '<leader>c', dap.continue)
vim.keymap.set('n', '<leader>so', dap.step_over)
vim.keymap.set('n', '<leader>si', dap.step_into)
vim.keymap.set('n', '<leader>d', dap.repl.open)
vim.keymap.set('n', '<M-k>', dapui.eval)
EOF

""""""""""" telescope config

lua <<EOF

local builtin = require('telescope.builtin')
local telescope = require('telescope')
vim.keymap.set('n', '<C-p>', builtin.find_files, {})
vim.keymap.set('n', '<C-s-p>', builtin.find_files, {})
vim.keymap.set('n', '<C-f>', builtin.live_grep, {})
vim.keymap.set('n', '<C-l>', builtin.buffers, {})
vim.keymap.set('n', '<C-h>', builtin.help_tags, {})

vim.keymap.set('n', 'gd', builtin.lsp_definitions, {})
vim.keymap.set('n', 'gD', builtin.lsp_type_definitions, {})
vim.keymap.set('n', 'gi', builtin.lsp_implementations, {})
vim.keymap.set('n', 'gr', builtin.lsp_references, {})
vim.keymap.set('n', '<leader>e', builtin.diagnostics, {})

vim.keymap.set('n', '<leader><space>', builtin.lsp_workspace_symbols, {})

vim.keymap.set('n', '<leader><leader>', builtin.builtin, {})

telescope.load_extension("zf-native")
telescope.load_extension("media_files");

telescope.setup({
	defaults = {
		path_display = { "truncate" }
	},
	pickers = {
		buffers = {
			mappings = {
				n = {
					["X"] = "delete_buffer"
				}
			}
		}
	},
})

vim.keymap.set('n', '<C-space>', builtin.resume, {})

EOF


"""""""""""" LSP Config


" Set completeopt to have a better completion experience
set completeopt=menuone,noselect

lua <<EOF
local trouble = require('trouble')
trouble.setup({
    auto_preview = false
})
vim.keymap.set("n", "<leader>xx", function() require("trouble").toggle() end)
vim.keymap.set("n", "<leader>xw", function() require("trouble").toggle("workspace_diagnostics") end)
vim.keymap.set("n", "<leader>xd", function() require("trouble").toggle("document_diagnostics") end)
vim.keymap.set("n", "<leader>xq", function() require("trouble").toggle("quickfix") end)
vim.keymap.set("n", "<leader>xl", function() require("trouble").toggle("loclist") end)
vim.keymap.set("n", "gR", function() require("trouble").toggle("lsp_references") end)

  -- Utility for super tab
  local has_words_before = function()
    unpack = unpack or table.unpack
    local line, col = unpack(vim.api.nvim_win_get_cursor(0))
    return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  end

  -- Set up nvim-cmp.
  local cmp = require("cmp")
  local lspkind = require('lspkind')
  local luasnip = require("luasnip")
  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        require('luasnip').lsp_expand(args.body)
      end,
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
      ["<Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable() 
        -- that way you will only jump inside the snippet region
        elseif luasnip.expand_or_jumpable() then
          luasnip.expand_or_jump()
        elseif has_words_before() then
          cmp.complete()
        else
          fallback()
        end
      end, { "i", "s" }),

      ["<S-Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif luasnip.jumpable(-1) then
          luasnip.jump(-1)
        else
          fallback()
        end
      end, { "i", "s" })
      }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'path' },
      { name = 'luasnip' }, -- For luasnip users.
      { name = 'calc' }
    }, {
      { name = 'buffer' },
    }),
    window = {
        --completion = {
        --  winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,Search:None",
        --  col_offset = -3,
        --  side_padding = 0,
        --},
      -- documentation = cmp.config.window.bordered(),
    },
    formatting = {
        fields = { "kind", "abbr", "menu" },
        format = function(entry, vim_item)
          local kind = lspkind.cmp_format({ mode = 'symbol_text', maxwidth = 50, ellipsis_char = '…', })(entry, vim_item)

          local strings = vim.split(kind.kind, "%s", { trimempty = true })
          kind.kind = " " .. (strings[1] or "") .. " "
          kind.menu = "    (" .. (strings[2] or "") .. ")"

          return kind
        end,
    }
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

local on_attach = function(client, bufnr)
  -- Use treesitter, disable highlighting from LSP
	client.server_capabilities.semanticTokensProvider = nil

  local lsp_formatting = function()
    vim.lsp.buf.format({
      filter = function(client)
        return client.name ~= "tsserver";
      end,
      async = true,
      bufnr = bufnr
    })
  end

  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gT', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  --vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('v', '<leader>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', '<leader>f', lsp_formatting, bufopts)
  vim.keymap.set('v', '<leader>f', lsp_formatting, bufopts)
  local float_opts = {
    focusable = true,
    close_events = { 
        --"BufLeave", 
        "CursorMoved", 
        "InsertEnter", 
        "FocusLost" 
    },
    border = 'rounded',
    source = 'always',
    prefix = ' ',
    scope = 'cursor',
  }

  vim.keymap.set('n', '<C-k>', function()
    vim.diagnostic.open_float(float_opts)
  end, bufopts)



end
  -- Set up lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  require('lspconfig')['tsserver'].setup {
    capabilities = capabilities,
    on_attach = on_attach
  }
  require('lspconfig')['cssls'].setup {
    capabilities = capabilities,
    on_attach = on_attach
  }
  require('lspconfig')['cssmodules_ls'].setup {
    capabilities = capabilities,
    on_attach = on_attach
  }
  require('lspconfig')['rust_analyzer'].setup {
    capabilities = capabilities,
    on_attach = on_attach
  }
  require('lspconfig')['graphql'].setup {
    capabilities = capabilities,
    on_attach = on_attach
  }
  require('lspconfig')['clangd'].setup {
    capabilities = capabilities,
    on_attach = on_attach
  }
  require('lspconfig')['jedi_language_server'].setup {
    capabilities = capabilities,
    on_attach = on_attach
  }
  require('lspconfig')['java_language_server'].setup {
    capabilities = capabilities,
    on_attach = on_attach,
    cmd = { '/home/astrid/projects/java-language-server/dist/lang_server_linux.sh' }
  }

  local null_ls = require("null-ls")

null_ls.setup({
    sources= {
        null_ls.builtins.diagnostics.eslint,
        null_ls.builtins.formatting.prettier.with({
            extra_filetypes = { "json" },
        }),
        null_ls.builtins.diagnostics.flake8.with({
            command = "poetry",
            args = { "run", "flake8", "--format", "default", "--stdin-display-name", "$FILENAME", "-" }
        }),
        null_ls.builtins.formatting.black.with({
            command = "poetry",
            args = { "run", "black", "--quiet", "--include", "$FILENAME", "-"  }
        }),
    },
    on_attach = on_attach
})

vim.diagnostic.config({
  virtual_text = false,
  signs = true,
  update_in_insert = true,
  severity_sort = true
})


local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

EOF

set updatetime=1000


""""""""""" Easy align configuration
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(LiveEasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(LiveEasyAlign)



""" VIM FUGITIVE

let g:github_enterprise_urls = ['https://github.int.midasplayer.com/', 'github.int.midasplayer.com']

